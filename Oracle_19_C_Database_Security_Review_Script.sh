#!/bin/bash

# Script Name: Database Oracle 19C 
# Author: Bhupendra Singh Sisodiya  
# Purpose: To systematically review and enhance Solaris security configurations review

# Function to display prompts with a separator
prompt() {
  echo "========================================================"
}

prompt
prompt ========================================================

prompt 1.Ensure AUDIT_SYS_OPERATIONS Is Set to TRUE
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME) = 'AUDIT_SYS_OPERATIONS';

prompt
prompt ========================================================

prompt 2.Ensure AUDIT_TRAIL Is Set to DB, XML, OS, DB,EXTENDED, or XML,EXTENDED
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='AUDIT_TRAIL';
prompt
prompt ========================================================

prompt 3.Ensure GLOBAL_NAMES Is Set to TRUE

SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='GLOBAL_NAMES';

SELECT DISTINCT UPPER(V.VALUE),
DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE),
1,(SELECT NAME FROM V$DATABASE),
(SELECT NAME FROM V$PDBS B
WHERE V.CON_ID = B.CON_ID))
FROM V$SYSTEM_PARAMETER V
WHERE UPPER(NAME) = 'GLOBAL_NAMES';


prompt
prompt ========================================================



prompt 4.Ensure O7_DICTIONARY_ACCESSIBILITY Is Set to FALSE 
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='O7_DICTIONARY_ACCESSIBILITY';

SELECT DISTINCT UPPER(V.VALUE),
DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE),
1,(SELECT NAME FROM V$DATABASE),
(SELECT NAME FROM V$PDBS B
WHERE V.CON_ID = B.CON_ID))
FROM V$SYSTEM_PARAMETER V
WHERE UPPER(NAME) = 'O7_DICTIONARY_ACCESSIBILITY';

prompt
prompt ========================================================

prompt 5. Ensure OS_ROLES Is Set to FALSE
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='OS_ROLES';

SELECT DISTINCT UPPER(V.VALUE),
DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE V.CON_ID = B.CON_ID))
FROM V$SYSTEM_PARAMETER V
WHERE UPPER(NAME) = 'OS_ROLES';

prompt
prompt ========================================================


prompt 6.Ensure REMOTE_LISTENER Is Empty

SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='REMOTE_LISTENER';

SELECT DISTINCT UPPER(V.VALUE),
DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE V.CON_ID = B.CON_ID))
FROM V$SYSTEM_PARAMETER V
WHERE UPPER(NAME) = 'REMOTE_LISTENER';


prompt 7 Ensure REMOTE_LOGIN_PASSWORDFILE Is Set to NONE

SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='REMOTE_LOGIN_PASSWORDFILE';

prompt
prompt ========================================================

prompt 8 Ensure REMOTE_OS_AUTHENT Is Set to FALSE
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='REMOTE_OS_AUTHENT';
prompt Ensure	VALUE is	set	to	FALSE


prompt
prompt ========================================================

prompt 9 Ensure REMOTE_OS_ROLES Is Set to FALSE
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='REMOTE_OS_ROLES';
prompt Ensure	VALUE is	set	to FALSE


prompt
prompt ========================================================

prompt 10 Ensure UTL_FILE_DIR Is Empty
SELECT VALUE
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='UTL_FILE_DIR';
prompt Ensure VALUE is	empty


prompt
prompt ========================================================

prompt 11 Ensure SEC_CASE_SENSITIVE_LOGON Is Set to TRUE
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='SEC_CASE_SENSITIVE_LOGON';
prompt Ensure	VALUE is	set	to	TRUE.


prompt
prompt ========================================================

prompt 12 Ensure SEC_MAX_FAILED_LOGIN_ATTEMPTS Is 3 or Less
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='SEC_MAX_FAILED_LOGIN_ATTEMPTS';
prompt Ensure	VALUE is	set	to	3.

prompt
prompt ========================================================

prompt 13 Ensure SEC_PROTOCOL_ERROR_FURTHER_ACTION Is Set to DROP,3
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='SEC_PROTOCOL_ERROR_FURTHER_ACTION';
prompt  Ensure	VALUE is	set	to	DROP,3.


prompt
prompt ========================================================

prompt 14 Ensure SEC_PROTOCOL_ERROR_TRACE_ACTION Is Set to LOG
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='SEC_PROTOCOL_ERROR_TRACE_ACTION';
prompt Ensure	VALUE is	set	to	LOG


prompt
prompt ========================================================

prompt.15 Ensure SEC_RETURN_SERVER_RELEASE_BANNER Is Set to FALSE
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='SEC_RETURN_SERVER_RELEASE_BANNER';
prompt Ensure	VALUE is	set	to	FALSE.


prompt
prompt ========================================================

prompt16 Ensure SQL92_SECURITY Is Set to TRUE'
promptNon	multi-tenant	or	pluggable	database	only:'
SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='SQL92_SECURITY';

promptMulti-tenant	in	the	container	database:
SELECT DISTINCT UPPER(V.VALUE),
DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE),
1,(SELECT NAME FROM V$DATABASE),
(SELECT NAME FROM V$PDBS B
WHERE V.CON_ID = B.CON_ID))
FROM V$SYSTEM_PARAMETER V
WHERE UPPER(NAME) = 'SQL92_SECURITY';


prompt
prompt ========================================================

prompt Ensure _trace_files_public Is Set to FALSE
SELECT A.KSPPINM, B.KSPPSTVL
FROM SYS.X_$KSPPI a, SYS.X_$KSPPCV b
WHERE A.INDX=B.INDX
AND A.KSPPINM LIKE '\_%trace_files_public' escape '\';

prompt Ensure RESOURCE_LIMIT Is Set to TRUE

SELECT UPPER(VALUE)
FROM V$SYSTEM_PARAMETER
WHERE UPPER(NAME)='RESOURCE_LIMIT';

SELECT DISTINCT UPPER(V.VALUE),
DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE V.CON_ID = B.CON_ID))
FROM V$SYSTEM_PARAMETER V
WHERE UPPER(NAME) = 'RESOURCE_LIMIT';

prompt Ensure value is set to true

prompt
prompt ========================================================
--#Oracle Connection and Login Restrictions

prompt Ensure FAILED_LOGIN_ATTEMPTS Is Less than or Equal to 5 
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM DBA_PROFILES
 WHERE PROFILE='DEFAULT'
AND RESOURCE_NAME='FAILED_LOGIN_ATTEMPTS'),
 'UNLIMITED','9999',
 P.LIMIT)) > 5
AND P.RESOURCE_NAME = 'FAILED_LOGIN_ATTEMPTS'
AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ) ;

SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
FROM CDB_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM CDB_PROFILES
 WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='FAILED_LOGIN_ATTEMPTS'
AND CON_ID = P.CON_ID),
 'UNLIMITED','9999',P.LIMIT)) > 5
AND P.RESOURCE_NAME = 'FAILED_LOGIN_ATTEMPTS'
AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE )
ORDER BY CON_ID, PROFILE, RESOURCE_NAME;


prompt
prompt ========================================================
prompt Ensure PASSWORD_LOCK_TIME Is Greater than or Equal to 1
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM DBA_PROFILES
WHERE PROFILE='DEFAULT'
AND RESOURCE_NAME='PASSWORD_LOCK_TIME'),
 'UNLIMITED','9999',
 P.LIMIT)) < 1
AND P.RESOURCE_NAME = 'PASSWORD_LOCK_TIME'
AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE );

SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
FROM CDB_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM CDB_PROFILES
 WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='PASSWORD_LOCK_TIME'
 AND CON_ID = P.CON_ID),
 'UNLIMITED','9999',P.LIMIT)) < 1
AND P.RESOURCE_NAME = 'PASSWORD_LOCK_TIME'
AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE )
ORDER BY CON_ID, PROFILE, RESOURCE_NAME;


prompt
prompt ========================================================

prompt Ensure PASSWORD_LIFE_TIME Is Less than or Equal to 90
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM DBA_PROFILES
 WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='PASSWORD_LIFE_TIME'),
 'UNLIMITED','9999',P.LIMIT)) > 90 AND
 P.RESOURCE_NAME = 'PASSWORD_LIFE_TIME' AND
EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE );

SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
FROM CDB_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM CDB_PROFILES
WHERE PROFILE='DEFAULT' 
AND RESOURCE_NAME='PASSWORD_LIFE_TIME'
AND CON_ID = P.CON_ID),
 'UNLIMITED','9999',
 P.LIMIT)) > 90
AND P.RESOURCE_NAME = 'PASSWORD_LIFE_TIME'
AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE )
ORDER BY CON_ID, PROFILE, RESOURCE_NAME;

prompt Ensure PASSWORD_REUSE_MAX Is Greater than or Equal to 20
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM DBA_PROFILES
 WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='PASSWORD_REUSE_MAX'),
 'UNLIMITED','9999',P.LIMIT)) < 20 AND
 P.RESOURCE_NAME = 'PASSWORD_REUSE_MAX' AND
EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE );

SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
 FROM CDB_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM CDB_PROFILES
WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='PASSWORD_REUSE_MAX'
AND CON_ID = P.CON_ID),
 'UNLIMITED','9999',P.LIMIT)) < 20
AND P.RESOURCE_NAME = 'PASSWORD_REUSE_MAX'
AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE )
ORDER BY CON_ID, PROFILE, RESOURCE_NAME;

prompt Ensure PASSWORD_REUSE_TIME Is Greater than or Equal to 365
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM DBA_PROFILES
 WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='PASSWORD_REUSE_TIME'),
 'UNLIMITED','9999',P.LIMIT)) < 365 AND
 P.RESOURCE_NAME = 'PASSWORD_REUSE_TIME' AND
EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE );

SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
FROM CDB_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM CDB_PROFILES
 WHERE PROFILE='DEFAULT'
AND RESOURCE_NAME='PASSWORD_REUSE_TIME'
AND CON_ID = P.CON_ID),
 'UNLIMITED','9999',P.LIMIT)) < 365
AND P.RESOURCE_NAME = 'PASSWORD_REUSE_TIME'
AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE )
ORDER BY CON_ID, PROFILE, RESOURCE_NAME;


prompt
prompt ========================================================

prompt Ensure PASSWORD_GRACE_TIME Is Less than or Equal to 5
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM DBA_PROFILES
WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='PASSWORD_GRACE_TIME'),
 'UNLIMITED','9999',P.LIMIT)) > 5 AND
 P.RESOURCE_NAME = 'PASSWORD_GRACE_TIME' AND
EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE );

SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
 FROM CDB_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM CDB_PROFILES
WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='PASSWORD_GRACE_TIME'
AND CON_ID = P.CON_ID),
 'UNLIMITED','9999',P.LIMIT)) > 5
AND P.RESOURCE_NAME = 'PASSWORD_GRACE_TIME'
AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE )
ORDER BY CON_ID, PROFILE, RESOURCE_NAME;

prompt
prompt ========================================================
prompt Ensure PASSWORD_VERIFY_FUNCTION Is Set for All Profiles
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE DECODE(P.LIMIT,
 'DEFAULT',(SELECT LIMIT
 FROM DBA_PROFILES
WHERE PROFILE='DEFAULT'
AND RESOURCE_NAME = P.RESOURCE_NAME),
 LIMIT) = 'NULL'
AND P.RESOURCE_NAME = 'PASSWORD_VERIFY_FUNCTION'
AND EXISTS ( SELECT 'X'
 FROM DBA_USERS U
 WHERE U.PROFILE = P.PROFILE );

 SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
FROM CDB_PROFILES P
WHERE DECODE(P.LIMIT,
 'DEFAULT',(SELECT LIMIT
 FROM CDB_PROFILES
WHERE PROFILE='DEFAULT'
AND RESOURCE_NAME = P.RESOURCE_NAME
AND CON_ID = P.CON_ID),
 LIMIT) = 'NULL'
AND P.RESOURCE_NAME = 'PASSWORD_VERIFY_FUNCTION'
AND EXISTS ( SELECT 'X'
 FROM CDB_USERS U
 WHERE U.PROFILE = P.PROFILE )
ORDER BY CON_ID, PROFILE, RESOURCE_NAME;

prompt
prompt ========================================================
prompt Ensure SESSIONS_PER_USER Is Less than or Equal to 10
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM DBA_PROFILES
 WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='SESSIONS_PER_USER'),
 'UNLIMITED','9999',P.LIMIT)) > 10
AND P.RESOURCE_NAME = 'SESSIONS_PER_USER'
AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE );

SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
FROM CDB_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM CDB_PROFILES
WHERE PROFILE='DEFAULT'
AND RESOURCE_NAME='SESSIONS_PER_USER'
AND CON_ID = P.CON_ID),
 'UNLIMITED','9999',P.LIMIT)) > 10
AND P.RESOURCE_NAME = 'SESSIONS_PER_USER'
AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE )
ORDER BY CON_ID, PROFILE, RESOURCE_NAME;


prompt
prompt ========================================================

prompt Ensure INACTIVE_ACCOUNT_TIME Is Less than or Equal to 120
SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT
FROM DBA_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM DBA_PROFILES
WHERE PROFILE='DEFAULT'
AND
RESOURCE_NAME='INACTIVE_ACCOUNT_TIME'),
 'UNLIMITED','9999',
P.LIMIT)) > 120
AND P.RESOURCE_NAME = 'INACTIVE_ACCOUNT_TIME'
AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE );

SELECT DISTINCT P.PROFILE, P.RESOURCE_NAME, P.LIMIT,
DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE P.CON_ID = B.CON_ID)) DATABASE
 FROM CDB_PROFILES P
WHERE TO_NUMBER(DECODE(P.LIMIT,
 'DEFAULT',(SELECT DISTINCT
DECODE(LIMIT,'UNLIMITED',9999,LIMIT)
 FROM CDB_PROFILES
WHERE PROFILE='DEFAULT'
 AND RESOURCE_NAME='INACTIVE_ACCOUNT_TIME'
AND CON_ID = P.CON_ID),
 'UNLIMITED','9999',
P.LIMIT)) > 120
AND P.RESOURCE_NAME = 'INACTIVE_ACCOUNT_TIME'
AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE );

prompt
prompt ========================================================
prompt Ensure All Default Passwords Are Changed
SELECT DISTINCT A.USERNAME
FROM DBA_USERS_WITH_DEFPWD A, DBA_USERS B
WHERE A.USERNAME = B.USERNAME
AND B.ACCOUNT_STATUS = 'OPEN';

SELECT DISTINCT A.USERNAME,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_USERS_WITH_DEFPWD A, CDB_USERS C
WHERE A.USERNAME = C.USERNAME
AND C.ACCOUNT_STATUS = 'OPEN';

prompt
prompt ========================================================
prompt Ensure All Sample Data And Users Have Been Removed
SELECT USERNAME
FROM DBA_USERS
WHERE USERNAME IN ('BI','HR','IX','OE','PM','SCOTT','SH');

SELECT DISTINCT A.USERNAME,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_USERS A
WHERE A.USERNAME IN ('BI','HR','IX','OE','PM','SCOTT','SH');

prompt
prompt ========================================================
prompt Ensure DBA_USERS.AUTHENTICATION_TYPE Is Not Set to EXTERNAL for Any User

SELECT USERNAME FROM DBA_USERS WHERE AUTHENTICATION_TYPE = 'EXTERNAL';
SELECT A.USERNAME,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B
 WHERE A.CON_ID = B.CON_ID))
FROM CDB_USERS A
WHERE AUTHENTICATION_TYPE = 'EXTERNAL';

prompt
prompt ========================================================
prompt Ensure No Users Are Assigned the DEFAULT Profile
SELECT USERNAME
FROM DBA_USERS
WHERE PROFILE='DEFAULT'
AND ACCOUNT_STATUS='OPEN'
AND ORACLE_MAINTAINED = 'N';

SELECT A.USERNAME,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_USERS A
WHERE A.PROFILE='DEFAULT'
AND A.ACCOUNT_STATUS='OPEN'
AND A.ORACLE_MAINTAINED = 'N';

prompt
prompt ========================================================
prompt Ensure SYS.USER$MIG Has Been Dropped
SELECT OWNER, TABLE_NAME
FROM DBA_TABLES
WHERE TABLE_NAME='USER$MIG' AND OWNER='SYS';

SELECT OWNER, TABLE_NAME,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TABLES A
WHERE TABLE_NAME='USER$MIG' AND OWNER='SYS';

prompt
prompt ========================================================
prompt Ensure No Public Database Links Exist
SELECT DB_LINK, HOST FROM DBA_DB_LINKS WHERE OWNER = 'PUBLIC';

SELECT DB_LINK, HOST,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_DB_LINKS A
WHERE OWNER = 'PUBLIC';

prompt
prompt ========================================================
prompt Ensure EXECUTE is revoked from PUBLIC on Network Packages

SELECT TABLE_NAME, PRIVILEGE, GRANTEE
FROM DBA_TAB_PRIVS
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN
('DBMS_LDAP','UTL_INADDR','UTL_TCP','UTL_MAIL','UTL_SMTP','UTL_DBWS','UTL_ORA
MTS','UTL_HTTP','HTTPURITYPE');

SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM
V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN
('DBMS_LDAP','UTL_INADDR','UTL_TCP','UTL_MAIL','UTL_SMTP','UTL_DBWS','UTL_ORA
MTS','UTL_HTTP','HTTPURITYPE')
ORDER BY CON_ID, TABLE_NAME;

prompt
prompt ========================================================
prompt2 Ensure EXECUTE is revoked from PUBLIC on File System Packages
SELECT TABLE_NAME, PRIVILEGE, GRANTEE
FROM DBA_TAB_PRIVS
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_ADVISOR','DBMS_LOB','UTL_FILE');

SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM
V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_ADVISOR','DBMS_LOB','UTL_FILE')
ORDER BY CON_ID, TABLE_NAME;

prompt
prompt ========================================================
prompt Ensure EXECUTE is revoked from PUBLIC on Encryption Packages
SELECT TABLE_NAME, PRIVILEGE, GRANTEE
FROM DBA_TAB_PRIVS
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_CRYPTO','DBMS_OBFUSCATION_TOOLKIT', 'DBMS_RANDOM');

SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM
V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_CRYPTO','DBMS_OBFUSCATION_TOOLKIT', 'DBMS_RANDOM')
ORDER BY CON_ID, TABLE_NAME;

prompt
prompt ========================================================
prompt Ensure EXECUTE is revoked from PUBLIC on Java Packages
SELECT TABLE_NAME, PRIVILEGE, GRANTEE
FROM DBA_TAB_PRIVS
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_JAVA','DBMS_JAVA_TEST');

SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM
V$DATABASE),
1,(SELECT NAME FROM V$DATABASE),
(SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_JAVA','DBMS_JAVA_TEST')
ORDER BY CON_ID, TABLE_NAME;

prompt
prompt ========================================================
prompt Ensure EXECUTE is revoked from PUBLIC on Job Scheduler Packages
SELECT TABLE_NAME, PRIVILEGE, GRANTEE
FROM DBA_TAB_PRIVS
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_SCHEDULER','DBMS_JOB');

SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM
V$DATABASE),
1,(SELECT NAME FROM V$DATABASE),
(SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_SCHEDULER','DBMS_JOB')
ORDER BY CON_ID, TABLE_NAME;

prompt
prompt ========================================================
prompt Ensure EXECUTE is revoked from PUBLIC on SQL Injection Helper Packages
SELECT TABLE_NAME, PRIVILEGE, GRANTEE
FROM DBA_TAB_PRIVS
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_SQL', 'DBMS_XMLGEN',
'DBMS_XMLQUERY','DBMS_XMLSTORE','DBMS_XMLSAVE','DBMS_AW','OWA_UTIL','DBMS_RED
ACT');

SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM
V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN ('DBMS_SQL', 'DBMS_XMLGEN',
'DBMS_XMLQUERY','DBMS_XMLSTORE','DBMS_XMLSAVE','DBMS_AW','OWA_UTIL','DBMS_RED
ACT')
ORDER BY CON_ID, TABLE_NAME;

prompt
prompt ========================================================
prompt Ensure EXECUTE is not granted to PUBLIC on Non-default Packages
SELECT TABLE_NAME, PRIVILEGE, GRANTEE
FROM DBA_TAB_PRIVS
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN
('DBMS_BACKUP_RESTORE','DBMS_FILE_TRANSFER','DBMS_SYS_SQL','DBMS_AQADM_SYSCAL
LS','DBMS_REPCAT_SQL_UTL','INITJVMAUX',
'DBMS_STREAMS_ADM_UTL','DBMS_AQADM_SYS','DBMS_STREAMS_RPC','DBMS_PRVTAQIM','L
TADM','WWV_DBMS_SQL',
'WWV_EXECUTE_IMMEDIATE','DBMS_IJOB','DBMS_PDB_EXEC_SQL');

SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM
V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE GRANTEE='PUBLIC'
AND PRIVILEGE='EXECUTE'
AND TABLE_NAME IN
('DBMS_BACKUP_RESTORE','DBMS_FILE_TRANSFER','DBMS_SYS_SQL','DBMS_AQADM_SYSCAL
LS','DBMS_REPCAT_SQL_UTL','INITJVMAUX',
'DBMS_STREAMS_ADM_UTL','DBMS_AQADM_SYS','DBMS_STREAMS_RPC','DBMS_PRVTAQIM','LTADM','WWV_DBMS_SQL',
'WWV_EXECUTE_IMMEDIATE','DBMS_IJOB','DBMS_PDB_EXEC_SQL')
ORDER BY CON_ID, TABLE_NAME;

prompt
prompt ========================================================
prompt Ensure ALL Is Revoked from Unauthorized GRANTEE on AUD$
SELECT GRANTEE, PRIVILEGE
FROM DBA_TAB_PRIVS
WHERE TABLE_NAME='AUD$'
AND OWNER = 'SYS';

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE TABLE_NAME='AUD$'
AND OWNER = 'SYS';

prompt
prompt ========================================================
prompt Ensure ALL Is Revoked from Unauthorized GRANTEE on DBA_%
SELECT GRANTEE,TABLE_NAME
FROM DBA_TAB_PRIVS
WHERE TABLE_NAME LIKE 'DBA_%'
AND OWNER = 'SYS'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE,TABLE_NAME,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_TAB_PRIVS A
WHERE TABLE_NAME LIKE 'DBA_%'
AND OWNER = 'SYS'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure ALL Is Revoked on Sensitive Tables
SELECT GRANTEE, PRIVILEGE, TABLE_NAME
FROM DBA_TAB_PRIVS
WHERE TABLE_NAME in
('CDB_LOCAL_ADMINAUTH$','DEFAULT_PWD$','ENC$','HISTGRM$','HIST_HEAD$','LINK$'
,'PDB_SYNC$','SCHEDULER$_CREDENTIAL','USER$','USER_HISTORY$','XS$VERIFIERS')
AND OWNER = 'SYS'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM
V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
DATABASE
FROM CDB_TAB_PRIVS A
WHERE TABLE_NAME in
('CDB_LOCAL_ADMINAUTH$','DEFAULT_PWD$','ENC$','HISTGRM$','HIST_HEAD$','LINK$'
,'PDB_SYNC$','SCHEDULER$_CREDENTIAL','USER$','USER_HISTORY$','XS$VERIFIERS')
AND OWNER = 'SYS'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y')
ORDER BY CON_ID, TABLE_NAME;

prompt
prompt ========================================================
prompt Ensure %ANY% Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE LIKE '%ANY%'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE LIKE '%ANY%'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure DBA_SYS_PRIVS.% Is Revoked from Unauthorized GRANTEE with ADMIN_OPTION Set to YES
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE ADMIN_OPTION='YES'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE ADMIN_OPTION='YES'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure EXECUTE ANY PROCEDURE Is Revoked from OUTLN
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='EXECUTE ANY PROCEDURE'
AND GRANTEE='OUTLN';

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='EXECUTE ANY PROCEDURE'
AND GRANTEE='OUTLN';

prompt
prompt ========================================================
prompt Ensure EXECUTE ANY PROCEDURE Is Revoked from DBSNMP
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='EXECUTE ANY PROCEDURE'
AND GRANTEE='DBSNMP';

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='EXECUTE ANY PROCEDURE'
AND GRANTEE='DBSNMP';

prompt
prompt ========================================================
prompt Ensure SELECT ANY DICTIONARY Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='SELECT ANY DICTIONARY'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='SELECT ANY DICTIONARY'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure SELECT ANY TABLE Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='SELECT ANY TABLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='SELECT ANY TABLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure AUDIT SYSTEM Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='AUDIT SYSTEM'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='AUDIT SYSTEM'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');


prompt
prompt ========================================================
prompt Ensure EXEMPT ACCESS POLICY Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='EXEMPT ACCESS POLICY'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='EXEMPT ACCESS POLICY'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');


prompt
prompt ========================================================
prompt Ensure BECOME USER Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='BECOME USER'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='BECOME USER'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure CREATE PROCEDURE Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='CREATE PROCEDURE'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='CREATE PROCEDURE'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure ALTER SYSTEM Is Revoked from Unauthorized GRANTEE

SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='ALTER SYSTEM'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='ALTER SYSTEM'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure CREATE ANY LIBRARY Is Revoked from Unauthorized GRANTEE

SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='CREATE ANY LIBRARY'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='CREATE ANY LIBRARY'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');


prompt
prompt ========================================================
prompt Ensure CREATE LIBRARY Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='CREATE LIBRARY'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='CREATE LIBRARY'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure GRANT ANY OBJECT PRIVILEGE Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='GRANT ANY OBJECT PRIVILEGE'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='GRANT ANY OBJECT PRIVILEGE'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure GRANT ANY ROLE Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='GRANT ANY ROLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='GRANT ANY ROLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure GRANT ANY PRIVILEGE Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, PRIVILEGE
FROM DBA_SYS_PRIVS
WHERE PRIVILEGE='GRANT ANY PRIVILEGE'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, PRIVILEGE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_SYS_PRIVS A
WHERE PRIVILEGE='GRANT ANY PRIVILEGE'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure DELETE_CATALOG_ROLE Is Revoked from Unauthorized GRANTEE

SELECT GRANTEE, GRANTED_ROLE
FROM DBA_ROLE_PRIVS
WHERE GRANTED_ROLE='DELETE_CATALOG_ROLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');
SELECT GRANTEE, GRANTED_ROLE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) 
 FROM CDB_ROLE_PRIVS A
WHERE GRANTED_ROLE='DELETE_CATALOG_ROLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure SELECT_CATALOG_ROLE Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, GRANTED_ROLE
FROM DBA_ROLE_PRIVS
WHERE GRANTED_ROLE='SELECT_CATALOG_ROLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, GRANTED_ROLE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_ROLE_PRIVS A
WHERE GRANTED_ROLE='SELECT_CATALOG_ROLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure EXECUTE_CATALOG_ROLE Is Revoked from Unauthorized GRANTEE
SELECT GRANTEE, GRANTED_ROLE
FROM DBA_ROLE_PRIVS
WHERE GRANTED_ROLE='EXECUTE_CATALOG_ROLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y');

SELECT GRANTEE, GRANTED_ROLE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_ROLE_PRIVS A
WHERE GRANTED_ROLE='EXECUTE_CATALOG_ROLE'
AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE
ORACLE_MAINTAINED='Y')
AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y');

prompt
prompt ========================================================
prompt Ensure DBA Is Revoked from Unauthorized GRANTEE
SELECT 'GRANT' AS PATH, GRANTEE, GRANTED_ROLE
FROM DBA_ROLE_PRIVS
WHERE GRANTED_ROLE = 'DBA' AND GRANTEE NOT IN ('SYS', 'SYSTEM')
UNION
SELECT 'PROXY', PROXY || '-' || CLIENT, 'DBA'
FROM DBA_PROXIES
WHERE CLIENT IN (SELECT GRANTEE
 FROM DBA_ROLE_PRIVS
 WHERE GRANTED_ROLE = 'DBA');

 SELECT 'GRANT' AS PATH, GRANTEE, GRANTED_ROLE,
DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) CON
FROM CDB_ROLE_PRIVS A
WHERE GRANTED_ROLE='DBA'
AND GRANTEE NOT IN ('SYS', 'SYSTEM')
UNION
SELECT 'PROXY', PROXY || '-' || CLIENT, 'DBA',
 DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) CON
FROM CDB_PROXIES A
WHERE CLIENT IN (SELECT GRANTEE
 FROM CDB_ROLE_PRIVS B
WHERE GRANTED_ROLE = 'DBA'
AND A.CON_ID = B.CON_ID);

prompt
prompt ========================================================
prompt Ensure the 'USER' Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='USER';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='USER';

prompt
prompt ========================================================
prompt Ensure the ROLE Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='ROLE';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS' 
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='ROLE';

prompt
prompt ========================================================
prompt Ensure the SYSTEM GRANT Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='SYSTEM GRANT';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='SYSTEM GRANT';

prompt
prompt ========================================================
prompt Ensure the PROFILE Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='PROFILE';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='PROFILE';

prompt
prompt ========================================================
prompt Ensure the DATABASE LINK Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='DATABASE LINK';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='DATABASE LINK';

prompt
prompt ========================================================
prompt Ensure the PUBLIC DATABASE LINK Audit Option Is Enabled 
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='PUBLIC DATABASE LINK';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION= 'PUBLIC DATABASE LINK' ;

prompt
prompt ========================================================
prompt Ensure the PUBLIC SYNONYM Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='PUBLIC SYNONYM';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='PUBLIC SYNONYM';

prompt
prompt ========================================================
prompt Ensure the SYNONYM Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='SYNONYM';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='SYNONYM';


prompt
prompt ========================================================
prompt Ensure the DIRECTORY Audit Option Is Enabled

SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='DIRECTORY';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='DIRECTORY';


prompt
prompt ========================================================
prompt Ensure the SELECT ANY DICTIONARY Audit Option Is Enabled 
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='SELECT ANY DICTIONARY';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='SELECT ANY DICTIONARY';


prompt
prompt ========================================================
prompt Ensure the GRANT ANY OBJECT PRIVILEGE Audit Option Is Enabled

SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='GRANT ANY OBJECT PRIVILEGE';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='GRANT ANY OBJECT PRIVILEGE';

prompt
prompt ========================================================
prompt Ensure the GRANT ANY PRIVILEGE Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='GRANT ANY PRIVILEGE';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='GRANT ANY PRIVILEGE';

prompt
prompt ========================================================
prompt Ensure the DROP ANY PROCEDURE Audit Option Is Enabled 
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='DROP ANY PROCEDURE';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='DROP ANY PROCEDURE';

prompt
prompt ========================================================
prompt Ensure the ALL Audit Option on SYS.AUD$ Is Enabled
SELECT *
FROM CDB_OBJ_AUDIT_OPTS
WHERE OBJECT_NAME='AUD$'
AND ALT='A/A'
AND AUD='A/A'
AND COM='A/A'
AND DEL='A/A'
AND GRA='A/A'
AND IND='A/A'
AND INS='A/A'
AND LOC='A/A'
AND REN='A/A'
AND SEL='A/A'
AND UPD='A/A'
AND FBK='A/A';

prompt
prompt ========================================================
prompt Ensure the PROCEDURE Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='PROCEDURE';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL 
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='PROCEDURE';

prompt
prompt ========================================================
prompt Ensure the ALTER SYSTEM Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='ALTER SYSTEM';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='ALTER SYSTEM';

prompt
prompt ========================================================
prompt Ensure the TRIGGER Audit Option Is Enabled
SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='TRIGGER';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='TRIGGER';

prompt
prompt ========================================================
prompt Ensure the CREATE SESSION Audit Option Is Enabled 

SELECT AUDIT_OPTION,SUCCESS,FAILURE
FROM DBA_STMT_AUDIT_OPTS
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='CREATE SESSION';

SELECT AUDIT_OPTION,SUCCESS,FAILURE,
 DECODE (A.CON_ID,
 0,(SELECT NAME FROM V$DATABASE),
 1,(SELECT NAME FROM V$DATABASE),
 (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID))
FROM CDB_STMT_AUDIT_OPTS A
WHERE USER_NAME IS NULL
AND PROXY_NAME IS NULL
AND SUCCESS = 'BY ACCESS'
AND FAILURE = 'BY ACCESS'
AND AUDIT_OPTION='CREATE SESSION';

prompt
prompt ========================================================
prompt Ensure the CREATE USER Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'CREATE USER'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the ALTER USER Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'ALTER USER'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the DROP USER Audit Option Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'DROP USER'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the CREATE ROLE Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'CREATE ROLE'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the ALTER ROLE Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'ALTER ROLE'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';


prompt
prompt ========================================================
prompt Ensure the DROP ROLE Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'DROP ROLE'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the GRANT Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'GRANT'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the REVOKE Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'REVOKE'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the CREATE PROFILE Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'CREATE PROFILE'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the ALTER PROFILE Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'ALTER PROFILE'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the DROP PROFILE Action Audit Is Enabled 
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'DROP PROFILE'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the CREATE DATABASE LINK Action Audit Is Enabled 
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'CREATE DATABASE LINK'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the ALTER DATABASE LINK Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'ALTER DATABASE LINK'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the DROP DATABASE LINK Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'DROP DATABASE LINK'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the CREATE SYNONYM Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'CREATE SYNONYM'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the ALTER SYNONYM Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'ALTER SYNONYM'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the DROP SYNONYM Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'DROP SYNONYM'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the SELECT ANY DICTIONARY Privilege Audit Is Enabled 
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'SELECT ANY DICTIONARY'
AND AUD.AUDIT_OPTION_TYPE = 'SYSTEM PRIVILEGE'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the AUDSYS.AUD$UNIFIED Access Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'ALL'
AND AUD.AUDIT_OPTION_TYPE = 'OBJECT ACTION'
AND (AUD.OBJECT_SCHEMA = 'SYS' OR AUD.OBJECT_SCHEMA = 'AUDSYS')
AND AUD.OBJECT_NAME = 'AUD$UNIFIED'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the CREATE PROCEDURE/FUNCTION/PACKAGE/PACKAGE BODY Action Audit Is Enabled
SELECT ENABLED.POLICY_NAME
FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS'
AND ( SELECT COUNT(*)
 FROM AUDIT_UNIFIED_POLICIES AUD
 WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
 AND AUD.AUDIT_OPTION IN
 ('CREATE PROCEDURE', 'CREATE FUNCTION',
 'CREATE PACKAGE', 'CREATE PACKAGE BODY')
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION') = 4;


prompt
prompt ========================================================
prompt Ensure the ALTER PROCEDURE/FUNCTION/PACKAGE/PACKAGE BODY Action Audit Is Enabled

SELECT enabled.policy_name
FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE ENABLED.SUCCESS = 'YES' AND
 ENABLED.FAILURE = 'YES' AND
 ENABLED.ENABLED_OPT = 'BY USER' AND
 ENABLED.USER_NAME = 'ALL USERS' AND
( SELECT COUNT(*) FROM AUDIT_UNIFIED_POLICIES AUD
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME AND
 AUD.AUDIT_OPTION IN ('ALTER PROCEDURE',
 'ALTER FUNCTION',
 'ALTER PACKAGE',
 'ALTER PACKAGE BODY') AND
AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION') = 4;

prompt
prompt ========================================================
prompt Ensure the DROP PROCEDURE/FUNCTION/PACKAGE/PACKAGE BODY Action Audit Is Enabled
SELECT enabled.policy_name
FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE ENABLED.SUCCESS = 'YES' AND
 ENABLED.FAILURE = 'YES' AND
 ENABLED.ENABLED_OPT = 'BY USER' AND
 ENABLED.USER_NAME = 'ALL USERS' AND
( SELECT COUNT(*) FROM AUDIT_UNIFIED_POLICIES AUD
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME AND
 AUD.AUDIT_OPTION IN ('DROP PROCEDURE',
 'DROP FUNCTION',
'DROP PACKAGE',
 'DROP PACKAGE BODY') AND
AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION') = 4;

prompt
prompt ========================================================
prompt Ensure the ALTER SYSTEM Privilege Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'ALTER SYSTEM'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the CREATE TRIGGER Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'CREATE TRIGGER'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the ALTER TRIGGER Action Audit IS Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'ALTER TRIGGER'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the DROP TRIGGER Action Audit Is Enabled
SELECT AUD.POLICY_NAME, AUD.AUDIT_OPTION, AUD.AUDIT_OPTION_TYPE
FROM AUDIT_UNIFIED_POLICIES AUD, AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION = 'DROP TRIGGER'
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION'
AND ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY'
AND ENABLED.USER_NAME = 'ALL USERS';

prompt
prompt ========================================================
prompt Ensure the LOGON AND LOGOFF Actions Audit Is Enabled
SELECT ENABLED.POLICY_NAME
FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED
WHERE ENABLED.SUCCESS = 'YES'
AND ENABLED.FAILURE = 'YES'
AND ENABLED.ENABLED_OPT = 'BY USER'
AND ENABLED.USER_NAME = 'ALL USERS'
AND
( SELECT COUNT(*) FROM AUDIT_UNIFIED_POLICIES AUD
WHERE AUD.POLICY_NAME = ENABLED.POLICY_NAME
AND AUD.AUDIT_OPTION IN ('LOGOFF', 'LOGON')
AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION') = 2;


prompt
prompt ========================================================
prompt --------------------------------End of Script-----------



















